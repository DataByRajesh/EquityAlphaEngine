name: Build and Deploy to GCP Cloud Run

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write   # required for OIDC

concurrency:
  group: cloudrun-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION:     ${{ vars.GCP_REGION }}              # e.g. europe-west2
  CLOUD_RUN_SERVICE: ${{ vars.CLOUD_RUN_SERVICE }}    # Cloud Run service name
  REPO:            ${{ vars.REPO }}                       # Artifact Registry repo
  IMAGE_TAG:      ${{ github.sha }}
  IMAGE_URI:      ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ vars.REPO }}/${{ vars.CLOUD_RUN_SERVICE }}
  # Optional app envs (set in repo variables/secrets as needed)
  APP_ENV:        ${{ vars.APP_ENV || 'prod' }}
  LOG_LEVEL:      ${{ vars.LOG_LEVEL || 'INFO' }}
  DATABASE_URL:   ${{ secrets.DATABASE_URL }}
  GCP_SA_KEY:    ${{ secrets.GCP_SA_KEY }}
  GMAIL_CREDENTIALS_FILE: ${{ secrets.GMAIL_CREDENTIALS_FILE }}
  QUANDL_API_KEY: ${{ secrets.QUANDL_API_KEY }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - uses: actions/checkout@v4


      # Authenticate to Google Cloud using Service Account Key if set, otherwise OIDC
      - name: Authenticate to Google Cloud (Service Account Key)
        if: env.GCP_SA_KEY != ''
        run: |
          echo "$GCP_SA_KEY" > /tmp/key.json
          gcloud auth activate-service-account --key-file=/tmp/key.json

      - name: Authenticate to Google Cloud (OIDC)
        if: env.GCP_SA_KEY == ''
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Ensure AR repo exists (first run safety)
      - name: Ensure Artifact Registry repo
        run: |
          gcloud artifacts repositories describe "$REPO" --location="$GCP_REGION" >/dev/null 2>&1 || \
          gcloud artifacts repositories create "$REPO" \
            --repository-format=docker \
            --location="$GCP_REGION" \
            --immutable-tags

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker $GCP_REGION-docker.pkg.dev --quiet

      # Buildx + cached build to registry
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image (with cache)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_URI }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_URI }}:latest
          cache-from: type=registry,ref=${{ env.IMAGE_URI }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_URI }}:buildcache,mode=max
          provenance: false   # optional: speed up by skipping SBOM/provenance
          sbom: false

      # Deploy with Cloud Run flags
      - name: Deploy to Cloud Run (no-cost tier)
        run: |
          # Deploys with settings that restrict usage to the free tier:
          # - min-instances=0 (no always-on cost)
          # - max-instances=1 (prevents scaling beyond free tier)
          # - cpu=1, memory=256Mi (lowest free tier config)
          # - allow-unauthenticated: remove if not needed (public access may incur cost if abused)
          gcloud run deploy "$CLOUD_RUN_SERVICE" \
            --image "$IMAGE_URI:$IMAGE_TAG" \
            --region "$GCP_REGION" \
            --platform managed \
            --cpu=1 \
            --memory=256Mi \
            --min-instances=0 \
            --max-instances=1 \
            --set-env-vars "CLOUD_RUN_SERVICE=${CLOUD_RUN_SERVICE}, GCP_REGION=${GCP_REGION}, REPO=${REPO}"

