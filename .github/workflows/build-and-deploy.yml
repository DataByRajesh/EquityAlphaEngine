name: Build and Deploy to GCP Cloud Run

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write   # required for OIDC

concurrency:
  group: cloudrun-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION:     ${{ vars.GCP_REGION }}              # e.g. europe-west2
  CLOUD_RUN_SERVICE: ${{ vars.CLOUD_RUN_SERVICE }}    # Cloud Run service name
  REPO:            ${{ vars.REPO }}                       # Artifact Registry repo
  IMAGE_TAG:      ${{ github.sha }}
  IMAGE_URI:      ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ vars.REPO }}/${{ vars.CLOUD_RUN_SERVICE }}
  # Optional app envs (set in repo variables/secrets as needed)
  APP_ENV:        ${{ vars.APP_ENV }}
  LOG_LEVEL:      ${{ vars.LOG_LEVEL }}
  DATABASE_URL:   ${{ secrets.DATABASE_URL }}
  GCP_SA_KEY:    ${{ secrets.GCP_SA_KEY }}
  GMAIL_CREDENTIALS_FILE: ${{ secrets.GMAIL_CREDENTIALS_FILE }}
  QUANDL_API_KEY: ${{ secrets.QUANDL_API_KEY }}
  CLIENT_SECRET_JSON: ${{ secrets.CLIENT_SECRET_JSON }}
  API_URL: ${{ secrets.API_URL }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - uses: actions/checkout@v4


      # Authenticate to Google Cloud using Service Account Key if set, otherwise OIDC
      - name: Authenticate to Google Cloud (Service Account Key)
        if: env.GCP_SA_KEY != ''
        run: |
          echo "$GCP_SA_KEY" > /tmp/key.json
          gcloud auth activate-service-account --key-file=/tmp/key.json

      - name: Authenticate to Google Cloud (OIDC)
        if: env.GCP_SA_KEY == ''
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Create or update Gmail client secret in Secret Manager
        run: |
          echo "$CLIENT_SECRET_JSON" | (gcloud secrets describe GMAIL_CLIENT_SECRET >/dev/null 2>&1 && gcloud secrets versions add GMAIL_CLIENT_SECRET --data-file=- || gcloud secrets create GMAIL_CLIENT_SECRET --data-file=-)

      # Ensure AR repo exists (first run safety)
      - name: Ensure Artifact Registry repo
        run: |
          gcloud artifacts repositories describe "$REPO" --location="$GCP_REGION" >/dev/null 2>&1 || \
          gcloud artifacts repositories create "$REPO" \
            --repository-format=docker \
            --location="$GCP_REGION" \
            --immutable-tags

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker $GCP_REGION-docker.pkg.dev --quiet

      # Buildx + cached build to registry
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image (no cache, force fresh build)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_URI }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_URI }}:latest
          no-cache: true
          provenance: false   # optional: speed up by skipping SBOM/provenance
          sbom: false

      # Create or update service account key in Secret Manager (if provided)
      - name: Create or update GCP Service Account key in Secret Manager
        if: env.GCP_SA_KEY != ''
        run: |
          echo "$GCP_SA_KEY" | (gcloud secrets describe GCP_SA_KEY >/dev/null 2>&1 && gcloud secrets versions add GCP_SA_KEY --data-file=- || gcloud secrets create GCP_SA_KEY --data-file=-)

      # Create missing secrets with placeholder values if they don't exist
      - name: Ensure required secrets exist
        run: |
          # Create BUILD_SHA secret if it doesn't exist
          if ! gcloud secrets describe BUILD_SHA >/dev/null 2>&1; then
            echo "${{ github.sha }}" | gcloud secrets create BUILD_SHA --data-file=-
          else
            echo "${{ github.sha }}" | gcloud secrets versions add BUILD_SHA --data-file=-
          fi
          
          # Create GMAIL_CREDENTIALS_FILE secret if it doesn't exist and GMAIL_CREDENTIALS_FILE env var is set
          if [ -n "$GMAIL_CREDENTIALS_FILE" ] && ! gcloud secrets describe GMAIL_CREDENTIALS_FILE >/dev/null 2>&1; then
            echo "$GMAIL_CREDENTIALS_FILE" | gcloud secrets create GMAIL_CREDENTIALS_FILE --data-file=-
          elif [ -n "$GMAIL_CREDENTIALS_FILE" ]; then
            echo "$GMAIL_CREDENTIALS_FILE" | gcloud secrets versions add GMAIL_CREDENTIALS_FILE --data-file=-
          fi

          # Create API_URL secret if it doesn't exist and API_URL env var is set
          if [ -n "$API_URL" ] && ! gcloud secrets describe API_URL >/dev/null 2>&1; then
            echo "$API_URL" | gcloud secrets create API_URL --data-file=-
          elif [ -n "$API_URL" ]; then
            echo "$API_URL" | gcloud secrets versions add API_URL --data-file=-
          fi

      # Deploy with Cloud Run flags
      - name: Deploy to Cloud Run (no-cost tier)
        run: |
          # Deploys with settings that restrict usage to the free tier:
          # - min-instances=0 (no always-on cost)
          # - max-instances=1 (prevents scaling beyond free tier)
          # - cpu=1, memory=256Mi (lowest free tier config)
          # - allow-unauthenticated: remove if not needed (public access may incur cost if abused)
          # - vpc-connector: enables access to VPC resources like databases
          
          # Build secrets list dynamically based on what exists
          SECRETS_LIST="DATABASE_URL=DATABASE_URL:latest,QUANDL_API_KEY=QUANDL_API_KEY:latest"
          
          # Add GCP_SA_KEY if it exists
          if gcloud secrets describe GCP_SA_KEY >/dev/null 2>&1; then
            SECRETS_LIST="${SECRETS_LIST},GCP_SA_KEY=GCP_SA_KEY:latest"
          fi
          
          # Add BUILD_SHA (we ensure it exists above)
          SECRETS_LIST="${SECRETS_LIST},BUILD_SHA=BUILD_SHA:latest"
          
          # Add GMAIL_CREDENTIALS_FILE if it exists
          if gcloud secrets describe GMAIL_CREDENTIALS_FILE >/dev/null 2>&1; then
            SECRETS_LIST="${SECRETS_LIST},GMAIL_CREDENTIALS_FILE=GMAIL_CREDENTIALS_FILE:latest"
          fi

          # Add API_URL if it exists
          if gcloud secrets describe API_URL >/dev/null 2>&1; then
            SECRETS_LIST="${SECRETS_LIST},API_URL=API_URL:latest"
          fi
          
          gcloud run deploy "$CLOUD_RUN_SERVICE" \
            --image "$IMAGE_URI:$IMAGE_TAG" \
            --region "$GCP_REGION" \
            --platform managed \
            --cpu=1 \
            --memory=512Mi \
            --min-instances=0 \
            --max-instances=3 \
            --concurrency=80 \
            --vpc-connector "projects/${GCP_PROJECT_ID}/locations/${GCP_REGION}/connectors/equity-vpc-connector" \
            --set-secrets="$SECRETS_LIST" \
            --set-env-vars "CLOUD_RUN_SERVICE=${CLOUD_RUN_SERVICE},GCP_REGION=${GCP_REGION},REPO=${REPO},GCP_PROJECT_ID=${GCP_PROJECT_ID},IMAGE_TAG=${IMAGE_TAG},IMAGE_URI=${IMAGE_URI},GMAIL_CREDENTIALS_SECRET_NAME=GMAIL_CLIENT_SECRET,USE_GCP_SECRET_MANAGER=true" \
            --timeout=900 \
            --allow-unauthenticated

